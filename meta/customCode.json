{
  "addedCode": {
    "standard": {
      ".eslintrc.js": {
        "path": ".eslintrc.js",
        "lintRules": "\n        \"no-console\": [\"error\"],\n        \"@typescript-eslint/no-var-requires\": \"off\",\n        \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n        \"@typescript-eslint/ban-types\": \"off\",\n        \"@typescript-eslint/no-explicit-any\":\"off\",\n        \"@typescript-eslint/ban-ts-comment\": \"off\"\n        "
      },
      ".gitignore": {
        "path": ".gitignore",
        "extra": "\n"
      },
      ".nycrc.yml": {
        "path": ".nycrc.yml",
        "testCoverageThresholds": "\ncheck-coverage: true\nbranches: 0\nlines: 55\nfunctions: 30\nstatements: 50\n"
      },
      "README.md": {
        "path": "README.md",
        "beginning": "\n",
        "description": "\ninterface to config files for projects.\n\n![](src/custom/images/gear-box.gif)\n",
        "afterDescription": "\n",
        "badges": "\n\n[//]: # ( ns__start_section usageSection )\n\n[![Version](https://img.shields.io/npm/v/gear-box.svg)](https://npmjs.org/package/gear-box)\n[![Downloads/week](https://img.shields.io/npm/dw/gear-box.svg)](https://npmjs.org/package/gear-box)\n[![License](https://img.shields.io/npm/l/gear-box.svg)](https://github.com/YizYah/gear-box/blob/master/package.json)\n\n[![Geenee](https://img.shields.io/badge/maintained%20by-geenee-brightgreen)](https://npmjs.org/package/geenee)\n[![Template](https://img.shields.io/badge/template-ts--packrat-blue)](https://npmjs.org/package/ts-packrat)\n",
        "APIIntro": "\n# API\n",
        "constantsIntro": "\n## General Constants and Commands\n"
      },
      "src/index.ts": {
        "path": "src/index.ts",
        "beginning": "\n\n",
        "export": "\nexport * from './custom/configuration'\nexport {CONFIG_FILE} from './custom/CONFIG_FILE'\nexport const getConfig = require('./custom/configs/getConfig').getConfig\nexport const setConfig = require('./custom/configs/setConfig').setConfig\n    "
      },
      "test/index.test.ts": {
        "path": "test/index.test.ts",
        "customImports": "\n",
        "general": "\ntest('general', t => {\n  t.not(typeof output, \"undefined\")\n  t.is(output.CONFIG_FILE,'config.yml')\n});\n"
      }
    }
  },
  "replacedCode": {},
  "removedCode": {}
}
